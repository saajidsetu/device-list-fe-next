import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.scss";

interface iDevice {
  id: number;
  name: string;
}

const Home = () => {
  const [devices, setDevices] = useState<iDevice[]>([]);
  const [loading, setLoading] = useState(true);

  const router = useRouter();

  const handleLogout = () => {
    localStorage.removeItem("device-list-token");
    router.push("/auth/login");
  };

  const handleNotify = async () => {
    const token = localStorage.getItem("device-list-token") as string;
    const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE}/notify`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer " + token,
      },
      body: JSON.stringify({
        name: "Sajid Hossen",
        email: "mdsajidsetu@gmail.com",
        repoUrl: "https://github.com/saajidsetu/device-list-fe-next",
        message:
          "I have completed task, only the circular thing is left. Thank you.",
      }),
    });
    const data = await res.text();
    console.log(data);

    alert(data);
  };

  useEffect(() => {
    const token = localStorage.getItem("device-list-token");
    if (!token) router.push("/auth/login");
  }, [router]);

  useEffect(() => {
    const get_devices = async () => {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE}/devices`);
      const data = await res.json();
      setDevices(data.devices);
      setLoading(false);
    };
    const intervalId = setInterval(get_devices, 5000);

    return () => clearInterval(intervalId);
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {loading ? (
        <p>Loading ...</p>
      ) : (
        <div className={styles.container}>
          <div className={styles.outer}>
            <div className={styles.count}>
              {devices.length} <br /> Devices Online
            </div>
            <div className={styles.dotGroup}>
              {devices.map((dev, i) => (
                <div key={i} className={styles.inner}></div>
              ))}
            </div>
          </div>
          <div className={styles.footer}>
            <button className={styles.button_t} onClick={handleNotify}>
              Notify
            </button>
            <button className={styles.button} onClick={handleLogout}>
              Logout
            </button>
          </div>
        </div>
      )}

      {/* <button style={{ position: "fixed" }} onClick={handleLogout}>
        Logout
      </button> */}
    </div>
  );
};

export default Home;
